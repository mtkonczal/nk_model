plot2 <- plot_nk_output(sim_data = sim_multiple, vars = c("y", "p", "r", "culminate_inflation"), sims = c(1, 2), scenario_titles = c("Test 1", "A second"))
print(plot2)
# Define simulation configurations with different Fed response setups.
sim_configs <- list(
list(
shock_period = c(5, 6),
shock_value  = c(3, -3),
shock_type   = c("vt", "vt"),
fed_response = 0  # Full Fed response
),
list(
shock_period = 5,
shock_value  = 1,
shock_type   = "vt",
fed_response = 0  # No Fed response
)
)
# Run multiple simulations using the configurations above.
sim_multiple <- simulate_multiple_nk(sim_configs, Q = 12)
# Plot selected variables ("y", "p", "r") for simulation 1 and 2
plot2 <- plot_nk_output(sim_data = sim_multiple, vars = c("y", "p", "r", "culminate_inflation"), sims = c(1, 2), scenario_titles = c("Test 1", "A second"))
print(plot2)
explain_nk_variables
explain_nk_variables()
plot2 <- plot_nk_output(sim_data = sim_multiple, vars = c("y", "p", "r", "vt"), sims = c(1, 2), scenario_titles = c("Test 1", "A second"))
print(plot2)
library(tidyverse)
# Function to plot selected variables from the simulation output.
# 'vars' is a character vector of variable names (e.g., c("y", "p", "r")).
# 'sims' is a numeric vector of simulation numbers to include (facets as columns).
plot_nk_output <- function(sim_data, vars, sims, scenario_titles = NULL) {
# Filter data to include only the specified simulations.
df <- sim_data %>% filter(simulation %in% sims)
# Pivot the selected variables into long format.
df_long <- df %>%
pivot_longer(
cols = all_of(vars),
names_to = "variable",
values_to = "value"
) %>%
mutate(
simulation = factor(simulation),
variable = factor(variable, levels = vars)
)
# Define a mapping from variable names to descriptive labels.
variable_labels <- c(
"y"  = "Output",
"p"  = "Inflation",
"r"  = "Real Interest Rate",
"A"  = "Autonomous Spending",
"pt" = "Inflation Target",
"ye" = "Potential Output",
"vt" = "Supply Shock",
"rs" = "Stabilising Interest Rate"
)
# Create simulation labels if scenario_titles are provided.
if (!is.null(scenario_titles)) {
sim_levels <- levels(df_long$simulation)
if (length(scenario_titles) != length(sim_levels)) {
warning("Length of scenario_titles does not match number of simulations. Using default simulation labels.")
sim_labels <- waiver()
} else {
sim_labels <- setNames(scenario_titles, sim_levels)
}
} else {
sim_labels <- waiver()
}
# Create the plot with facets:
# - Rows: descriptive variable labels
# - Columns: simulation labels (if provided)
p <- ggplot(df_long, aes(x = period, y = value, color = variable)) +
geom_line(size = 1) +
facet_grid(variable ~ simulation, scales = "free_y",
labeller = labeller(variable = variable_labels, simulation = sim_labels)) +
labs(title = "New Keynesian Model Simulation",
x = "Period", y = "Value") +
theme_minimal() +
theme(
strip.text.y = element_text(angle = 0, size = 16),
strip.text.x = element_text(size = 16),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.spacing = unit(0.5, "lines")
)
p
}
# Compute culminating values for each simulation.
# For each simulation, culminate_inflation is calculated as the final value of cumprod((p/100) + 1)
# and culminate_growth is calculated as the ratio of final to initial output (y).
compute_culminations <- function(sim_df) {
sim_df %>%
group_by(simulation) %>%
mutate(
culminate_inflation = last(cumprod((p / 100) + 1)),
culminate_growth = last(y) / first(y)
) %>%
ungroup()
}
# Function to simulate one run of the New Keynesian model with general shocks.
simulate_nk_model <- function(Q = 50,
shock_period = numeric(0),
shock_value = numeric(0),
shock_type = character(0),
fed_response = 1,
a1 = 0.3, a2 = 0.7, b = 1,
A_val = 10, pt_val = 2, ye_val = 5) {
# Validate that if shocks are provided they have the same length.
if(!(length(shock_period) == length(shock_value) && length(shock_value) == length(shock_type))){
stop("shock_period, shock_value, and shock_type must have the same length.")
}
# Calculate the default policy parameter for the monetary rule.
a3_default <- (a1 * (1/(b * a2) + a2))^(-1)
# Create a tibble with baseline values for each period.
df <- tibble(
period = 1:Q,
A = A_val,
pt = pt_val,
ye = ye_val,
vt = 0,       # Baseline: no supply shock.
y = NA_real_,
p = NA_real_,
rs = NA_real_,
r = NA_real_
)
# Apply shocks: modify the chosen variable at the specified period.
for(i in seq_along(shock_period)) {
t_idx <- shock_period[i]
if(t_idx >= 1 && t_idx <= Q) {
var_name <- shock_type[i]
if(!(var_name %in% c("A", "pt", "ye", "vt"))) {
stop("shock_type must be one of 'A', 'pt', 'ye', or 'vt'")
}
df[[var_name]][t_idx] <- df[[var_name]][t_idx] + shock_value[i]
}
}
# Set initial conditions (period 1, at equilibrium).
df <- df %>%
mutate(
y = replace(y, 1, ye[1]),
p = replace(p, 1, pt[1]),
rs = replace(rs, 1, (A[1] - ye[1]) / a1),
r = replace(r, 1, (A[1] - ye[1]) / a1)
)
# Run the simulation for periods 2 to Q.
for(t in 2:Q) {
df$y[t]  <- df$A[t] - a1 * df$r[t - 1]                     # IS curve
df$p[t]  <- df$p[t - 1] + a2 * (df$y[t] - df$ye[t]) + df$vt[t] # Phillips curve
df$rs[t] <- (df$A[t] - df$ye[t]) / a1                        # Neutral interest rate
df$r[t]  <- df$rs[t] + fed_response * a3_default * (df$p[t] - df$pt[t])  # Monetary policy rule
}
# Compute culminating values for inflation and growth.
df <- compute_culminations(df)
# Ensure a simulation column exists.
df <- df %>% mutate(simulation = 1)
df
}
# Function to run multiple simulations. Each simulation is defined by its own shock specification.
simulate_multiple_nk <- function(simulations,
Q = 50,
a1 = 0.3, a2 = 0.7, b = 1,
A_val = 10, pt_val = 2, ye_val = 5) {
map_dfr(seq_along(simulations), function(i) {
sim_conf <- simulations[[i]]
shock_period <- if (!is.null(sim_conf$shock_period)) sim_conf$shock_period else numeric(0)
shock_value  <- if (!is.null(sim_conf$shock_value))  sim_conf$shock_value  else numeric(0)
shock_type   <- if (!is.null(sim_conf$shock_type))   sim_conf$shock_type   else character(0)
fed_response <- if (!is.null(sim_conf$fed_response)) sim_conf$fed_response else 1
df_sim <- simulate_nk_model(Q = Q,
shock_period = shock_period,
shock_value = shock_value,
shock_type = shock_type,
fed_response = fed_response,
a1 = a1, a2 = a2, b = b,
A_val = A_val, pt_val = pt_val, ye_val = ye_val)
df_sim <- df_sim %>% mutate(simulation = i)
df_sim
})
}
# Updated helper function to explain model variables.
explain_nk_variables <- function() {
cat("New Keynesian Model Variable Explanations:\n")
cat("-------------------------------------------------\n")
cat("A: Autonomous spending – exogenous demand in the economy.\n")
cat("pt: Inflation target – the central bank's desired inflation rate.\n")
cat("ye: Potential output – the economy's natural or potential level of output.\n")
cat("vt: Supply shock – exogenous shock affecting the supply side (e.g., cost shocks).\n")
cat("y: Output – the actual level of economic production/output.\n")
cat("p: Inflation – the actual rate of inflation over time.\n")
cat("rs: Stabilising (neutral) interest rate – the rate that keeps the economy at equilibrium.\n")
cat("r: Real interest rate – the actual interest rate, adjusted via the Fed's policy rule.\n")
cat("culminate_inflation: Cumulative inflation factor computed as the final value of cumprod((p/100) + 1).\n")
cat("culminate_growth: Cumulative growth factor for output, computed as final output divided by initial output.\n")
cat("\nAdditional Parameter:\n")
cat("fed_response: Multiplier indicating the strength of the Fed's reaction to the inflation gap.\n")
cat("               (1 = full response, 0 = no response)\n")
cat("-------------------------------------------------\n")
}
plot2 <- plot_nk_output(sim_data = sim_multiple, vars = c("y", "p", "r", "vt"), sims = c(1, 2), scenario_titles = c("Test 1", "A second"))
print(plot2)
# Returns a named vector of colors for New Keynesian model variables.
get_nk_colors <- function() {
colors <- c(
"y"  = "#1f78b4",   # Output: cool blue
"p"  = "#33a02c",   # Inflation: cool green
"r"  = "#e31a1c",   # Real Interest Rate: cool red
"vt" = "#6a3d9a",   # Supply Shock: cool purple
"A"  = "#a6cee3",   # Autonomous Spending: light blue
"pt" = "#b2df8a",   # Inflation Target: light green
"ye" = "#fb9a99",   # Potential Output: light red/pink
"rs" = "#cab2d6"    # Stabilising Interest Rate: lavender
)
colors
}
# Returns a named vector of colors for New Keynesian model variables.
get_nk_colors <- function() {
colors <- c(
"y"  = "#1f78b4",   # Output: cool blue
"p"  = "#33a02c",   # Inflation: cool green
"r"  = "#e31a1c",   # Real Interest Rate: cool red
"vt" = "#6a3d9a",   # Supply Shock: cool purple
"A"  = "#a6cee3",   # Autonomous Spending: light blue
"pt" = "#b2df8a",   # Inflation Target: light green
"ye" = "#fb9a99",   # Potential Output: light red/pink
"rs" = "#cab2d6"    # Stabilising Interest Rate: lavender
)
colors
}
# Returns a named vector of descriptive labels for model variables.
get_nk_variable_labels <- function() {
labels <- c(
"y"  = "Output",
"p"  = "Inflation",
"r"  = "Real Interest Rate",
"vt" = "Supply Shock",
"A"  = "Autonomous Spending",
"pt" = "Inflation Target",
"ye" = "Potential Output",
"rs" = "Stabilising Interest Rate"
)
labels
}
# Updated plotting function that facets by simulation and variable.
# It now uses get_nk_colors() for colors and get_nk_variable_labels() for facet labels.
plot_nk_output <- function(sim_data, vars, sims, scenario_titles = NULL) {
# Filter the data to include only the specified simulations.
df <- sim_data %>% filter(simulation %in% sims)
# Pivot the selected variables into long format.
df_long <- df %>%
pivot_longer(
cols = all_of(vars),
names_to = "variable",
values_to = "value"
) %>%
mutate(
simulation = factor(simulation),
variable = factor(variable, levels = vars)
)
# Get descriptive labels from helper function.
variable_labels <- get_nk_variable_labels()
# Create simulation labels if scenario_titles are provided.
if (!is.null(scenario_titles)) {
sim_levels <- levels(df_long$simulation)
if (length(scenario_titles) != length(sim_levels)) {
warning("Length of scenario_titles does not match number of simulations. Using default simulation labels.")
sim_labels <- waiver()
} else {
sim_labels <- setNames(scenario_titles, sim_levels)
}
} else {
sim_labels <- waiver()
}
# Build the ggplot.
p <- ggplot(df_long, aes(x = period, y = value, color = variable)) +
geom_line(size = 1) +
facet_grid(variable ~ simulation, scales = "free_y",
labeller = labeller(variable = variable_labels, simulation = sim_labels)) +
scale_color_manual(values = get_nk_colors()) +
labs(title = "New Keynesian Model Simulation",
x = "Period", y = "Value") +
theme_minimal() +
theme(
strip.text.y = element_text(angle = 0, size = 16),
strip.text.x = element_text(size = 16),
panel.border = element_rect(color = "black", fill = NA, size = 1),
panel.spacing = unit(0.5, "lines")
)
p
}
# -----------------------
# Example 2: Multiple Simulations
# -----------------------
# Define simulation configurations with different Fed response setups.
sim_configs <- list(
list(
shock_period = c(5, 6),
shock_value  = c(3, -3),
shock_type   = c("vt", "vt"),
fed_response = 0  # Full Fed response
),
list(
shock_period = 5,
shock_value  = 1,
shock_type   = "vt",
fed_response = 0  # No Fed response
)
)
# Run multiple simulations using the configurations above.
sim_multiple <- simulate_multiple_nk(sim_configs, Q = 12)
simulate_multiple_nk
sim_configs
simulate_multiple_nk(sim_configs, Q = 12)
# nk_model.R
# New Keynesian Model Simulation, Plotting, and Documentation
# ------------------------------------------------------------
library(tidyverse)
# Function to simulate one run of the New Keynesian model with general shocks.
simulate_nk_model <- function(Q = 50,
shock_period = numeric(0),
shock_value = numeric(0),
shock_type = character(0),
fed_response = 1,
a1 = 0.3, a2 = 0.7, b = 1,
A_val = 10, pt_val = 2, ye_val = 2) {
# Validate that if shocks are provided they have the same length.
if(!(length(shock_period) == length(shock_value) && length(shock_value) == length(shock_type))){
stop("shock_period, shock_value, and shock_type must have the same length.")
}
# Calculate the default policy parameter for the monetary rule.
a3_default <- (a1 * (1/(b * a2) + a2))^(-1)
# Create a tibble with baseline values for each period.
# A, pt, and ye are constant over time unless shocked; vt defaults to zero.
df <- tibble(
period = 1:Q,
A = A_val,
pt = pt_val,
ye = ye_val,
vt = 0,       # Baseline: no supply shock.
y = NA_real_,
p = NA_real_,
rs = NA_real_,
r = NA_real_
)
# Apply shocks: each shock specification modifies the chosen variable at the specified period.
for(i in seq_along(shock_period)) {
t_idx <- shock_period[i]
if(t_idx >= 1 && t_idx <= Q) {
var_name <- shock_type[i]
if(!(var_name %in% c("A", "pt", "ye", "vt"))) {
stop("shock_type must be one of 'A', 'pt', 'ye', or 'vt'")
}
# Add the shock value to the baseline value at the specified period.
df[[var_name]][t_idx] <- df[[var_name]][t_idx] + shock_value[i]
}
}
# Set initial conditions (period 1, at equilibrium).
df <- df %>%
mutate(
y = replace(y, 1, ye[1]),
p = replace(p, 1, pt[1]),
rs = replace(rs, 1, (A[1] - ye[1]) / a1),
r = replace(r, 1, (A[1] - ye[1]) / a1)
)
# Run the simulation for periods 2 to Q.
for(t in 2:Q) {
# IS curve: output determined by autonomous spending and lagged real interest rate.
df$y[t] <- df$A[t] - a1 * df$r[t - 1]
# Phillips curve: inflation adjusts based on the output gap and any supply shock.
df$p[t] <- df$p[t - 1] + a2 * (df$y[t] - df$ye[t]) + df$vt[t]
# Stabilising (neutral) interest rate.
df$rs[t] <- (df$A[t] - df$ye[t]) / a1
# Monetary policy rule: the Fed adjusts the real rate in response to the inflation gap.
# The strength of the Fed's reaction is set by fed_response (1 = full response, 0 = no response).
df$r[t] <- df$rs[t] + fed_response * a3_default * (df$p[t] - df$pt[t])
}
# Ensure a simulation column exists.
df <- df %>% mutate(simulation = 1)
# Make culminative inflation and output
df <- compute_culminations(df)
df
}
# Function to run multiple simulations. Each simulation is defined by its own shock specification.
simulate_multiple_nk <- function(simulations,
Q = 50,
a1 = 0.3, a2 = 0.7, b = 1,
A_val = 10, pt_val = 2, ye_val = 2) {
map_dfr(seq_along(simulations), function(i) {
sim_conf <- simulations[[i]]
shock_period <- if (!is.null(sim_conf$shock_period)) sim_conf$shock_period else numeric(0)
shock_value  <- if (!is.null(sim_conf$shock_value))  sim_conf$shock_value  else numeric(0)
shock_type   <- if (!is.null(sim_conf$shock_type))   sim_conf$shock_type   else character(0)
fed_response <- if (!is.null(sim_conf$fed_response)) sim_conf$fed_response else 1
df_sim <- simulate_nk_model(Q = Q,
shock_period = shock_period,
shock_value = shock_value,
shock_type = shock_type,
fed_response = fed_response,
a1 = a1, a2 = a2, b = b,
A_val = A_val, pt_val = pt_val, ye_val = ye_val)
df_sim <- df_sim %>% mutate(simulation = i)
df_sim
})
}
compute_culminations <- function(sim_df) {
sim_df %>%
mutate(
culminate_inflation = (cumprod((p / 100) + 1)),
culminate_growth = (cumprod((y / 100) + 1)),
) %>%
ungroup()
}
simulate_multiple_nk(sim_configs, Q = 12)
# Define simulation configurations with different Fed response setups.
sim_configs <- list(
list(
shock_period = c(5, 6),
shock_value  = c(3, -3),
shock_type   = c("vt", "vt"),
fed_response = 0  # Full Fed response
),
list(
shock_period = 5,
shock_value  = 1,
shock_type   = "vt",
fed_response = 0  # No Fed response
)
)
# Run multiple simulations using the configurations above.
sim_multiple <- simulate_multiple_nk(sim_configs, Q = 12)
# Plot selected variables ("y", "p", "r") for simulation 1 and 2
plot2 <- plot_nk_output(sim_data = sim_multiple, vars = c("y", "p", "r", "vt"), sims = c(1, 2), scenario_titles = c("Test 1", "A second"))
print(plot2)
# Plot selected variables ("y", "p", "r") for simulation 1 and 2
plot2 <- plot_nk_output(sim_data = sim_multiple, vars = c("vt", "y", "p", "r", "vt"), sims = c(1, 2), scenario_titles = c("Test 1", "A second"))
plot2 <- plot_nk_output(sim_data = sim_multiple, vars = c("vt", "y", "p", "r"), sims = c(1, 2), scenario_titles = c("Test 1", "A second"))
print(plot2)
# Returns a named vector of colors for New Keynesian model variables.
get_nk_colors <- function() {
colors <- c(
"y"  = "#1f78b4",   # Output: cool blue
"p"  = "#33a02c",   # Inflation: cool green
"r"  = "#e31a1c",   # Real Interest Rate: cool red
"vt" = "#6a3d9a",   # Supply Shock: cool purple
"A"  = "#a6cee3",   # Autonomous Spending: light blue
"pt" = "#b2df8a",   # Inflation Target: light green
"ye" = "#fb9a99",   # Potential Output: light red/pink
"rs" = "#cab2d6"    # Stabilising Interest Rate: lavender
)
colors
}
# Returns a named vector of descriptive labels for model variables.
get_nk_variable_labels <- function() {
labels <- c(
"y"  = "Output",
"p"  = "Inflation",
"r"  = "Real Interest Rate",
"vt" = "Supply Shock",
"A"  = "Autonomous Spending",
"pt" = "Inflation Target",
"ye" = "Potential Output",
"rs" = "Stabilising Interest Rate"
)
labels
}
# Updated plotting function that facets by simulation and variable.
# It now uses get_nk_colors() for colors and get_nk_variable_labels() for facet labels.
plot_nk_output <- function(sim_data, vars, sims, scenario_titles = NULL) {
# Filter the data to include only the specified simulations.
df <- sim_data %>% filter(simulation %in% sims)
# Pivot the selected variables into long format.
df_long <- df %>%
pivot_longer(
cols = all_of(vars),
names_to = "variable",
values_to = "value"
) %>%
mutate(
simulation = factor(simulation),
variable = factor(variable, levels = vars)
)
# Get descriptive labels from helper function.
variable_labels <- get_nk_variable_labels()
# Create simulation labels if scenario_titles are provided.
if (!is.null(scenario_titles)) {
sim_levels <- levels(df_long$simulation)
if (length(scenario_titles) != length(sim_levels)) {
warning("Length of scenario_titles does not match number of simulations. Using default simulation labels.")
sim_labels <- waiver()
} else {
sim_labels <- setNames(scenario_titles, sim_levels)
}
} else {
sim_labels <- waiver()
}
# Build the ggplot.
p <- ggplot(df_long, aes(x = period, y = value, color = variable)) +
geom_line(size = 1) +
facet_grid(variable ~ simulation, scales = "free_y",
labeller = labeller(variable = variable_labels, simulation = sim_labels)) +
scale_color_manual(values = get_nk_colors()) +
labs(title = "New Keynesian Model Simulation",
x = "Period", y = "Value") +
theme_minimal() +
theme(
strip.text.y = element_text(angle = 0, size = 16),
strip.text.x = element_text(size = 16),
panel.border = element_rect(color = "black", fill = NA, size = 1),
panel.spacing = unit(0.5, "lines")
) +
theme(legend.position = "none")
p
}
plot2 <- plot_nk_output(sim_data = sim_multiple, vars = c("vt", "y", "p", "r"), sims = c(1, 2), scenario_titles = c("Test 1", "A second"))
print(plot2)
